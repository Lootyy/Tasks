import { useState, useEffect } from 'react'
import Card from './Card'

export default function CardList({ id, pos = 0, title, cards, type, dropOnCard, addCard, dropOnList, setDraggingList, moveList, insertList, addList,
    direction = 'Vertical', displayMenu = false, draggable = false, setBookmark, updateCard, removeList, setDraggingCardHeight })
{
    const [isDragging, setDragging] = useState(false)
    const [menuOpen, setMenuOpen] = useState(false)

    useEffect(() => {
        function closeMenu() {
            setMenuOpen(false)
        }
        
        window.addEventListener('click', closeMenu)

        return function cleanUp()
        {
            window.removeEventListener('click', closeMenu)
        }
    }, [])
    
    function handleDrop(e)
    {
        if (e.dataTransfer.types.indexOf(type) !== -1)
        {
            let card = JSON.parse(e.dataTransfer.getData(type))
            dropOnList({inPos: cards.length, inListPos: pos, outPos: card.pos , outListPos: card.listPos})
        }
    }

    function handleDragEnter(e)
    {
        if (!isDragging && (e.dataTransfer.types.indexOf('cardlist') !== -1))
        {
            moveList(id)
        }
    }

    function handleDragStart(e)
    {
        e.dataTransfer.setDragImage(new Image,0,0) // set empty image to get rid of autogenerated bipmap
        e.dataTransfer.setData('cardlist', '')
        e.dataTransfer.clearData(type)
        setDraggingList(id)
        setDragging(true)
    }

    function handleDragEnd(e)
    {
        setDragging(false)
    }

    function handleAddCard()
    {
        addCard(pos)
    }

    function handleOpenMenu(e)
    {
        if (!menuOpen)
            e.stopPropagation()
        setMenuOpen(!menuOpen)
    }

    function handleInsertList()
    {
        insertList(id)
    }

    function handleAddList()
    {
        addList(pos)
    }

    function handleRemoveList()
    {
        removeList(pos)
    }

    return (
        <div className={`CardList ${direction}`} draggable={draggable} onDrop={draggable ? handleDrop : undefined} onDragOver={e => e.preventDefault()} onDragStart={draggable ? handleDragStart : undefined} 
            onDragEnd={handleDragEnd} onDragEnter={draggable ? handleDragEnter : undefined} data-isdragging={isDragging ? 'true' : 'false'} data-menuopen={menuOpen ? 'true' : 'false'}
            >
            <div className='CardList__Header'>
                <span>{title}</span>
                {
                    displayMenu && 
                    <div className='CardList__Controls'>
                    <svg className="CardList__Controls__Add" viewBox="0 0 20 20" onClick={handleAddCard}>
                                <path d='M 10,0 L 10,20 M 20,10 L 0,10'></path>
                    </svg>
                    <svg className="CardList__Controls__Menu HamburgerMenu" viewBox="0 0 15 10" onClick={handleOpenMenu}>
                            <path d='M 0,1 L 15,1 M 0,5 L 15,5 M 0,9 L 15,9'></path>
                    </svg>
                </div>
                }
            </div>
            <div className='CardList__Content'>
            {
                cards.map((e,i) => {
                    return <Card key={e.id} id={e.id} pos={i} listPos={pos} title={e.title} tasks={e.tasks} taskType={e.taskType} content={e.content} dropOnCard={dropOnCard} listType={type} bookmarked={Object.hasOwn(e, 'isBookmarked') ? e.isBookmarked : false}
                    setBookmark={setBookmark} updateCard={updateCard} setDraggingCardHeight={setDraggingCardHeight} preferredDisplay={e.preferredDisplay}></Card>
                })
            }
            </div>
            {
                menuOpen && 
                <ul className='Dropdown__options'>
                    <li onClick={handleInsertList}>Insert before</li>
                    <li onClick={handleAddList}>Insert after</li>
                    <li onClick={handleRemoveList}>Remove list</li>
                </ul>
            }
        </div>
    )
}